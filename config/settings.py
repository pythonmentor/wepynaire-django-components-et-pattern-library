"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    "django-insecure-r+=f6b7d76y0&21_-mnpcz()&cmhf98ac*hprfqbej^s(yuxm3"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    # Pour utiliser django-components et django-pattern-library
    "django_components",
    "pattern_library",
    # Pour utiliser django-vite
    "django_vite",
    # Pour recharger automatiquement le navigateur lors de la
    # modification des fichiers
    "django_browser_reload",
    # Usage de la configuration avancée de django-template-partials pour être
    # compatible avec django-components
    "template_partials.apps.SimpleAppConfig",
    # Pour se faciliter la vie avec les formulaires
    "crispy_forms",
    "crispy_tailwind",
    # Mes propres applications
    "exemple",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Pour recharger automatiquement le navigateur lors de la modification des
    # fichiers
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = "config.urls"

# TEMPLATES:
# Une liste contenant les réglages de tous les moteurs de gabarit à utiliser
# avec Django. Chaque élément de la liste est un dictionnaire contenant les
# options de chacun des moteurs.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#templates
TEMPLATES = [
    {
        # Le moteur de gabarit à utiliser. Les moteurs de gabarit intégrés à
        # Django sont :
        # - DjangoTemplates: 'django.template.backends.django.DjangoTemplates'
        # - Jinja2: 'django.template.backends.jinja2.Jinja2'
        # https://docs.djangoproject.com/fr/5.1/ref/settings/#std-setting-TEMPLATES-BACKEND
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Répertoires dans lesquels le moteur recherche des fichiers sources de gabarits, dans
        # l’ordre de leur recherche.
        # https://docs.djangoproject.com/fr/5.1/ref/settings/#dirs
        "DIRS": [
            BASE_DIR / "components" / "lib",  # pour django-pattern-library
        ],
        # Paramètres supplémentaires à passer au moteur de gabarit. Les paramètres disponibles
        # varient en fonction du moteur.
        "OPTIONS": {
            "builtins": [
                "template_partials.templatetags.partials",
                "django_components.templatetags.component_tags",
            ],
            # Liste des processeurs de contexte. Voici ce que font chacun des processeurs de
            # contexte intégrés à Django
            # https://docs.djangoproject.com/fr/5.1/ref/templates/api/#built-in-template-context-processors
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
            "loaders": [
                (
                    # Loader de gabarits de django-template-partials # utile pour htmx
                    "template_partials.loader.Loader",
                    [
                        (
                            "django.template.loaders.cached.Loader",
                            [
                                # Loader Django par défaut
                                "django.template.loaders.filesystem.Loader",
                                # Inclure ceci est équivalent APP_DIRS=True
                                "django.template.loaders.app_directories.Loader",
                                # Loader de django-components
                                "django_components.template_loader.Loader",
                            ],
                        )
                    ],
                )
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "fr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# URL utilisée pour se référer aux fichiers statiques se trouvant dans
# STATIC_ROOT.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#static-url
STATIC_URL = "/static/"

# Le chemin absolu vers le répertoire dans lequel collectstatic rassemble les fichiers statiques en
# vue du déploiement.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#static-root
STATIC_ROOT = BASE_DIR / "static"

# La configuration STORAGES définit les backends de stockage pour les fichiers
# par défaut et les fichiers statiques dans une application Django.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#storages
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Ce réglage configure django-vite pour servir les fichiers statiques.
DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
    }
}

# Liste des moteurs de découverte sachant retrouver les fichiers statiques
# en divers endroits.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#staticfiles-finders
STATICFILES_FINDERS = [
    # Default finders
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # Django components
    # https://github.com/EmilStenstrom/django-components/#installation
    "django_components.finders.ComponentsFileSystemFinder",
]

# FICHIERS DE MEDIA

# URL qui gère les fichiers médias servis à partir de MEDIA_ROOT, utilisée pour
# la gestion des fichiers stockés. Elle doit se terminer par une barre oblique
# si elle ne contient pas de valeur vide.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#media-url
MEDIA_URL = "/media/"

# Chemin absolu de répertoire pointant vers le répertoire qui contiendra les
# fichiers uploadés par les utilisateurs.
# https://docs.djangoproject.com/fr/5.1/ref/settings/#media-root
MEDIA_ROOT = BASE_DIR / "media"

# Configuration de django-vite pour servir les fichiers statiques.
DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Configuration de Django Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

# Configuration de django-components
COMPONENTS = {
    "multiline_tags": True,  # par défaut, mais j'aime être explicite
    "tag_formatter": "django_components.component_shorthand_formatter",
    "reload_on_template_change": True,
    "template_cache_size": 0,
}

# Configuration de django-pattern-library
PATTERN_LIBRARY = {
    # Groupes de modèles pour la navigation de la bibliothèque de motifs. Les
    # clés sont les titres des groupes et les valeurs sont des listes de
    # préfixes de noms de modèles qui seront recherchés pour remplir les
    # groupes.
    "SECTIONS": (
        ("components", ["patterns/components"]),
        ("blocks", ["patterns/blocks"]),
        ("pages", ["patterns/pages"]),
    ),
    # Définit dans quels composants de modèle ils doivent être rendus,
    # afin qu'ils puissent utiliser les dépendances des composants au niveau
    # de la page, comme le CSS.
    "PATTERN_BASE_TEMPLATE_NAME": "patterns/base.html",
}

# Autoriser l'affichage des pages d'erreur de Django dans la bibliothèque de
# patterns via un iframe en mode DEBUG.
if DEBUG:
    X_FRAME_OPTIONS = "SAMEORIGIN"
